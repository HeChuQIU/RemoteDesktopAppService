@using System.Drawing
@using System.Globalization
@using System.Net.Http
@using System.IO
@using System.Reactive
@using System.Reactive.Linq
@using System.Reactive.Subjects
@using System.Windows.Documents
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@inject ISnackbar Snackbar

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudTextField @bind-Value="@_searchText"
              Label="搜索" Variant="Variant.Outlined"
              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
              Class="pa-2"/>

<MudList>
    @foreach (var item in _localApplicationInfos
                  .Where(a => a.Name.StartsWith(_searchText, true, CultureInfo.CurrentCulture))
                  .OrderBy(a => a.Name))
    {
        var isExists = File.Exists(item.ExecutablePath);
        var isToBeRemote = isExists && item.RemoteApp;

        var backgroundColor = isExists ? (isToBeRemote ? Colors.Green.Lighten5 : Colors.Red.Lighten5) : Colors.Grey.Lighten5;
        <MudListItem Class="pa-2">
            <MudPaper Elevation="3" Class="border-0 border-dashed" Style="@($"background-color:{backgroundColor};")">
                <MudGrid Spacing="2" Justify="Justify.FlexStart" Class="align-center pl-4">
                    <MudItem>
                        @if (isExists)
                        {
                            <MudImage Src="@($"data:image/png;base64,{BitmapToBase64(GetIconFromExe(item.ExecutablePath))}")"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error"/>
                        }
                    </MudItem>
                    <MudItem>
                        <MudStack Spacing="0">
                            @item.Name
                            <MudText Typo="Typo.body2" Style="@($"color:{Colors.Grey.Default};")">@item.ExecutablePath</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem Class="d-flex flex-grow-1 justify-end">
                        <MudSwitch Disabled="@(!isExists)"
                                   @bind-Value:get="isToBeRemote"
                                   @bind-Value:set="@(b => { item.RemoteApp = b; SetLocalApplicationInfos(); })"
                                   Label=@(isToBeRemote ? "已启用" : "已禁用") Color="Color.Primary">
                        </MudSwitch>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudListItem>
    }
</MudList>

@code {
    readonly List<LocalApplicationInfo> _localApplicationInfos = new();

    string _searchText = string.Empty;

    protected override void OnInitialized()
    {
        LocalApplicationInfo.LoadApplications();
        var apps = LocalApplicationInfo.LocalApplicationInfos.ToArray();
        _localApplicationInfos.AddRange(apps);
    }

    private async Task SetLocalApplicationInfos()
    {
        LocalApplicationInfo.LocalApplicationInfos.Clear();
        LocalApplicationInfo.LocalApplicationInfos.AddRange(_localApplicationInfos);
        LocalApplicationInfo.SaveApplications();
        LocalApplicationInfo.SaveRemoteApplicationToRegistry();
    }

    Bitmap? GetIconFromExe(string filePath)
    {
        return Icon.ExtractAssociatedIcon(filePath)?.ToBitmap();
    }

    string BitmapToBase64(Bitmap? bitmap)
    {
        if (bitmap is null) return string.Empty;
        using var memoryStream = new MemoryStream();
        bitmap.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Png);
        byte[] bitmapBytes = memoryStream.ToArray();
        return Convert.ToBase64String(bitmapBytes);
    }

}